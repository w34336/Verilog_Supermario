module supermario
	(
		CLOCK_50,						//	On Board 50 MHz
		// Your inputs and outputs here
        KEY,
        SW,
		// The ports below are for the VGA output.  Do not change.
		VGA_CLK,   						//	VGA Clock
		VGA_HS,							//	VGA H_SYNC
		VGA_VS,							//	VGA V_SYNC
		VGA_BLANK_N,						//	VGA BLANK
		VGA_SYNC_N,						//	VGA SYNC
		VGA_R,   						//	VGA Red[9:0]
		VGA_G,	 						//	VGA Green[9:0]
		VGA_B   						//	VGA Blue[9:0]
	);
	input CLOCK_50;
	input [9:0] sw;
	input [3:0] KEY;
	output			VGA_CLK;   				//	VGA Clock
	output			VGA_HS;					//	VGA H_SYNC
	output			VGA_VS;					//	VGA V_SYNC
	output			VGA_BLANK_N;				//	VGA BLANK
	output			VGA_SYNC_N;				//	VGA SYNC
	output	[9:0]	VGA_R;   				//	VGA Red[9:0]
	output	[9:0]	VGA_G;	 				//	VGA Green[9:0]
	output	[9:0]	VGA_B;   				//	VGA Blue[9:0]
	
	wire left = ~KEY[3];
	wire right = ~KEY[1];
	wire jump = ~KEY[2];
	wire go = ~KEY[0];
	
	wire [2:0] colour;
	wire [7:0] x;
	wire [6:0] y;
	wire writeEn;
	
	vga_adapter VGA(
			.resetn(resetn),
			.clock(CLOCK_50),
			.colour(colour),
			.x(x),
			.y(y),
			.plot(writeEn),
			/* Signals for the DAC to drive the monitor. */
			.VGA_R(VGA_R),
			.VGA_G(VGA_G),
			.VGA_B(VGA_B),
			.VGA_HS(VGA_HS),
			.VGA_VS(VGA_VS),
			.VGA_BLANK(VGA_BLANK_N),
			.VGA_SYNC(VGA_SYNC_N),
			.VGA_CLK(VGA_CLK));
		defparam VGA.RESOLUTION = "160x120";
		defparam VGA.MONOCHROME = "FALSE";
		defparam VGA.BITS_PER_COLOUR_CHANNEL = 1;
		defparam VGA.BACKGROUND_IMAGE = "black.mif";
		
		
	//control and datapath to be initiated here;
		
endmodule

module control(
	input resetn,
	input go,
	input clk,
	input left,
	input right,
	input jump,
	output reg left_en, right_en, plot);
	
	reg [3:0] current_state, next_state;
	
	localparam SPAWN_CHAR         = 4'd0,
				  DRAW_CHAR          = 4'd1,
				  DRAW_CHAR_WAIT     = 4'd2,
				  MOVE_LEFT          = 4'd3,
				  MOVE_RIGHT			= 4'd4,
				  STAY					= 4'd5,
				  AIRBRONE			   = 4'd6,
				  DRAW_TERRAIN		   = 4'd7;
				  INITIALIZE         = 4'd8;
				  
				  
	always@(*)
	begin: state_table
			case (current_state)
				INITIALIZE: next_state = go ? SPAWN_CHAR : INITIALIZE;
				SPAWN_CHAR: next_state = go ? STAY
				  